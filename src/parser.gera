
mod json::parser

use std::(iter::*, res::*, opt::*, str::*, coll::*)

/// Given a stream of tokens `tokens` and their source string `source`, returns
/// a result of the next token or a human-readable string.
proc next_token(tokens, source) = tokens
    |> next()
    |> unwrap_or_else(|| #err "[_] unexpected EOF"
        |> fmt([json::source::as_str(source, length(source) - 1)])
    )

/// Returns a result of either a new parser for the given source string `source`
/// or a human-readable error. 
proc create_parser(source) {
    val tokens = source
        |> json::lexer::tokens()
    val start = tokens |> next_token(source) ?ok
    return #ok {
        tokens, source,
        current = start,

        try_next = |self| {
            case self.tokens |> next() {
                #none -> {}
                #some r -> {
                    self.current = r ?ok
                }
            }
            return #ok unit
        },

        next = |self| {
            self.current = self.tokens |> next_token(self.source) ?ok
            return #ok unit
        },

        expect = |self, kind| {
            case self.current.kind == kind -> return #ok unit
            return #err "[_] unexpected token"
                |> fmt([json::source::as_str(self.source, self.current.start)])
        }
    }
}

/// Returns a result of the JSON value starting at the current token
/// of the parser `p` or a human-readable error.
proc parse_value(p) {
    val start = p.current
    case start.kind {
        #string -> {
            p .> try_next() ?ok
            return #ok #string start.content
        }
        #number -> {
            p .> try_next() ?ok
            return #ok #number start.content
                |> parse_flt() 
                |> expect("went through the lexer already")
        }
        #bool -> {
            p .> try_next() ?ok
            return #ok #bool start.content == "true"
        }
        #null -> {
            p .> try_next() ?ok
            return #ok #null unit
        }
        #bracket_open -> return p |> parse_array()
        #brace_open -> return p |> parse_object()
    } else return #err "[_] unexpected token"
        |> fmt([json::source::as_str(p.source, start.start)])
}

/// Returns a result of the JSON array starting at the current token
/// of the parser `p` or a human-readable error.
proc parse_array(p) {
    val values = repeat_over(|| p)
        |> take_while(|p| p.current.content == "[" || p.current.content == ",")
        |> reduce(|r, p| {
            val items = r ?ok
            p .> next() ?ok
            case p.current.content != "]" -> {
                val item = p |> parse_value() ?ok
                items .> push(item)
            }
            return #ok items
        }, #ok Vector::new())
        ?ok
    p .> expect(#bracket_close unit) ?ok
    p .> try_next() ?ok
    return #ok #array values
}

/// Returns a result of the JSON object starting at the current token
/// of the parser `p` or a human-readable error.
proc parse_object(p) {
    val members = repeat_over(|| p)
        |> take_while(|p| p.current.content == "{" || p.current.content == ",")
        |> reduce(|r, p| {
            val members = r ?ok
            p .> next() ?ok
            case p.current.content != "}" -> {
                p .> expect(#string unit) ?ok
                val name = p.current.content
                p .> next() ?ok
                p .> expect(#colon unit) ?ok
                p .> next() ?ok
                val value = p |> parse_value() ?ok
                members .> set(name, value)
            }
            return #ok members
        }, #ok HashMap::new())
        ?ok
    p .> expect(#brace_close unit) ?ok
    p .> try_next() ?ok
    return #ok #object members
}

/// Attempts to parse a JSON value from a given string `source`, 
/// returning a result of the parsed JSON value or a human-readable string error.
pub proc parse(source) = source 
    |> create_parser() ?ok
    |> parse_value()